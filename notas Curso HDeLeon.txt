Notas curso patrones diseño C#

Tipos:
-Creacionales
-Comportamiento
-Estructurales

POO Repaso
Clase es el molde de un objeto

Herencia
Cuando una clase tiene un hijo, la clase hijo hereda atributos y comportamientos del padre

Clase abstracta
Sirve para especificar funcionamiento y propiedades. No crea objetos
Se crea usando la palabra reservada abstract

public abstract class Person()

No se puede crear un objeto de esta clase
Si se escribe
Person myPerson = new Person()
Marca error ya que al ser abstract no permite

Generar una estructura como base, no como funcionamiento
Para que clases hijas hereden ese funcionamiento

Para crear un objeto de esta clase se tiene que crear una clase hija, esta clase hija si podra llamarse para crear un objeto

Interfaz
Sirve para evitar el problema que existe con la herencia, ya que solo se puede heredar de un elemento

Es la base de lo patrones de diseño, junto con las clases abstractas

Para heredar de mas de un elemento se usa la interfaz

Sirve para dar un mecanismo para categorización, puede estar en N categorias,

Se llama implementar interfaz, es decir que se le va a dar funcionamiento

Es un contrato, cuando se implementa se tiene que cumplir con las propiedades y elementos que tiene la interfaz

en una interfaz normalmente solo ira el nombre de los metodos que se requieran, cuando se implemente una interfaz
se tienen que poner a fuerza el o los metodos de la interfaz

Por convencion en C# las interfaces se llaman usando la "I" mayuscula seguido del nombre, ejemplo
IMiInterfaz

Singleton
Tipo Creacional, 
Para crear objetos

Solamente existe un solo objeto en la aplicacion
razones:
-Complejo d ecrear
-conexino a un tercero que solo permite un objeto
-pull d econexiones que no requiere estar creando varias conexiones


Factory Method

Tipo creacional
Fabrica creadora de objetos

Se requiere de una clase abstracta

Entidades:
Creator .- Clase Abstracta que heredaran clases de esta
ConcreteCreator.- Clase que hereda de Creator y que es la que crera los productos, es la que tiene la responsabilidad de la creación
Product.- Interfaz que va a categorizar los productos que se van a crear
ConcreteProducto.- Es la clase que crea los objetos, es la que se va a utilizar en el

Ventajas, 
la responsabilidad de la crecion del objeto va a estar en la fabrica, solamente en un lado se crea el objeto, en caso de un cambio solo se cambia ahi
se puede tener objetos parecidos que se categorizan en la interfaz product

Ayuda cuando no se saben factores externos aun, cuando cliente decide agregar nuevos factores, 

2 Instancias generales
Fabrica (Creator)
Producto a crear

2 Interfaces
Para dar orden y categorizar 
Una para categorizar los productos creados
Otra para categorizar las fabricas creadoras


Tiene otra implementacion por medio del switch case, pero con el ejemplo mostrado es mas claro


Inyección de dependencias
Utilizado comunmente en frameworks actuales,
por lo general los frameworks ya tienen forma de implementarlos

trata sobre quitarle a una clase la responsabilidad de crear objetos apartir de otras clases
Es decir puede crear objetos pero no tiene que saber como se crean.

El objeto se le inyecta una vez creado

Se pueden inyectar en un metodo o en su constructor, por lo general en ASP se inyectan en el cosntructor

REsuelve un prinicipio SOlid, Inversion Dependendia
no s edebe depender de implementaciones pero si de abstracciones

La clase no debe depender de implementaciones

